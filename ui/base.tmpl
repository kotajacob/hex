{{define "base"}}
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="description" content="Hexbear, but for old and slower computers">
	<title>ʕ •ᴥ•ʔ</title>
	<style nonce="{{.CSPNonce}}">
	:root {
		--ratio: 1.5;
		--s-5: calc(var(--s-4) / var(--ratio));
		--s-4: calc(var(--s-3) / var(--ratio));
		--s-3: calc(var(--s-2) / var(--ratio));
		--s-2: calc(var(--s-1) / var(--ratio));
		--s-1: calc(var(--s0) / var(--ratio));
		--s0: 1rem;
		--s1: calc(var(--s0) * var(--ratio));
		--s2: calc(var(--s1) * var(--ratio));
		--s3: calc(var(--s2) * var(--ratio));
		--s4: calc(var(--s3) * var(--ratio));
		--color-primary: hsl(319deg 41% 43%);
		--color-alt: hsl(8deg 72% 43%);
		--color-fg: #000;
		--color-bg: #fff;
		font-size: calc(.333vw + 1em);
	}
	*,
	:after,
	:before {
		box-sizing: border-box;
		font-family: inherit;
		color: inherit;
		background-color: inherit;
		overflow-wrap: break-word;
		margin: 0;
		padding: 0;
		border: 0 solid
	}
	body {
		color: var(--color-fg);
		background-color: var(--color-bg);
		box-sizing: content-box;
		max-inline-size: 60ch;
		margin-inline: auto;
		padding: var(--s1);
		font-family: system-ui, sans-serif;
	}
	body > * + * {
		margin-block-start: var(--s1);
	}
	a {
		color: var(--color-alt);
	}
	a:hover, a:focus {
		color: var(--color-bg);
		outline: 0 none;
		background-color: var(--color-alt);
	}
	a:visited {
		color: var(--color-primary);
	}
	a:visited:hover, a:visited:focus, ::selection {
		color: var(--color-bg);
		outline: 0 none;
		background-color: var(--color-primary);
	}
	hr {
		border-block-end: var(--s-4) solid var(--color-primary);
	}
	ul, blockqoute {
		padding-inline-start: var(--s0);
	}
	blockqoute {
		border-block-end: var(--s-4) solid var(--color-alt);
	}

	header {
		font-family: monospace;
	}
	header > * {
		text-align: center;
	}
	header a {
		text-decoration: none;
	}
	header > * + * {
		margin-block-start: var(--s1);
	}

	.stack {
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
	}
	.stack > * + * {
		margin-block-start: var(--s1);
	}
	.stack a {
		text-decoration: none;
	}

	.post {
		display: flex;
	}
	.post > *:first-child {
		flex: 1;
		padding-inline-end: 1ch;
	}

	article {
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
	}
	article > * + * {
		margin-block-start: var(--s0);
	}

	.comments {
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
		list-style: none;
	}
	.comment > .comment-text {
		margin-block: 0;
	}
	.comments * + * {
		margin-block-start: var(--s0);
	}
	.nested {
		border-inline-start: var(--s-4) solid var(--color-primary);
		padding-inline-start: var(--s-1);
	}

	.comment-folder {
		font-family: monospace, monospace;
		color: var(--color-alt);
		cursor: pointer;
	}
	.comment-folder:hover, .comment-folder:focus {
		color: var(--color-bg);
		outline: 0 none;
		background-color: var(--color-alt);
	}
	.folded > * + * {
		display: none;
	}
	small {
		vertical-align:	15%;
		font-size: var(--s-1);
	}
	.byline time {
		float: right;
	}
	</style>
</head>
<body>
	{{template "main" .}}
</body>
</html>
<script nonce="{{.CSPNonce}}">
const folders = document.getElementsByClassName("comment-folder");
const fold = (event) => {
	const label = event.currentTarget;
	const comment = label.parentElement.parentElement;
	if (comment.classList.contains("folded")) {
		comment.classList.remove("folded")
		label.textContent = "[-]"
	} else {
		comment.classList.add("folded")
		label.textContent = "[+]"
	}
}
for (folder of folders) {
	folder.addEventListener("click", fold);
}
</script>
{{end}}
